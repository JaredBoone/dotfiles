#!/usr/bin/env bash

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` timestamp until finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &


install_zsh () {
    echo "[zsh] - Begin"

  # Install zsh
  if [ ! -f /usr/local/bin/zsh ]; then
      echo "Installing zsh. Re-run this script."
      brew install zsh
  fi

  # Set the default shell to zsh\
  if [[ ! $(echo $SHELL) == $(which zsh) ]]; then
    echo "Setting default shell to zsh. Re-run this script."
    sudo -v
    sudo dscl . -create /Users/$USER UserShell /usr/local/bin/zsh
    sudo chsh -s /usr/local/bin/zsh $USER
  fi

  # Install Oh My Zsh
  if [[ ! -d $HOME/.oh-my-zsh/ ]]; then
    echo "Installing oh-my-zsh. Re-run this script."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sed 's:env zsh -l::g' | sed 's:chsh -s .*$::g')"
  fi

  # zsh-nvm
  if [[ ! -d $HOME/.oh-my-zsh/custom/plugins/zsh-nvm/ ]]; then
    echo "Installing zsh-nvm plugin."
    git clone https://github.com/lukechilds/zsh-nvm $HOME/.oh-my-zsh/custom/plugins/zsh-nvm
  fi

  # Install powerline fonts
  if [[ ! -f "${HOME}/Library/Fonts/Meslo LG M Regular for Powerline.ttf" ]]; then
    cp "${HOME}/.iterm/fonts/Meslo LG M Regular for Powerline.ttf" $HOME/Library/Fonts/
  fi
  if [[ ! -f "${HOME}/Library/Fonts/Source Code Pro for Powerline.otf" ]]; then
    cp "${HOME}/.iterm/fonts/Source Code Pro for Powerline.otf" $HOME/Library/Fonts/
  fi

  # Install custom zsh theme
  if [[ ! -f $HOME/.oh-my-zsh/themes/jared.zsh-theme ]]; then
    echo "Installing custom theme: jared"
    ln -s ~/.zsh/themes/jared.zsh-theme $HOME/.oh-my-zsh/themes
  fi

  # Local zshrc
  touch ${HOME}/.zshrc.local

  echo "[zsh] - End"
}


install_terminal_themes () {
  # Install the Solarized Dark theme for Terminal
  open "${HOME}/.terminal/profiles/Solarized Dark ansi.terminal"
}



run_dockutil () {
  # Remove all apps from the dock
  dockutil --list | awk -F"\t" '{print $1}' | while read -r line; do
    dockutil --remove "$line"
  done

  # Give dock time to restart
  sleep 5

  # Add Applications folder as a list
  dockutil --add '/Applications' --view list --display folder --sort name
}


install_iterm_prefs () {
  # Specify the preferences directory
  defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string "~/.iterm"
  # Tell iTerm2 to use the custom preferences in the directory
  defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true
}

customize_osx () {
  # Only use UTF-8 in Terminal.app
  defaults write com.apple.terminal StringEncodings -array 4

  # Save screenshots to ~/Documents/Screenshots
  defaults write com.apple.screencapture location -string "${HOME}/Documents/Screenshots"

  # Enable sub-pixel rendering on non-Apple LCDs.
  #defaults write NSGlobalDomain AppleFontSmoothing -int 2

  # Disable and kill Dashboard
  # Can be reverted with:
  # defaults write com.apple.dashboard mcx-disabled -boolean NO; killall Dock
  defaults write com.apple.dashboard mcx-disabled -boolean YES; killall Dock

  # Open text files with sublimetext3 by default
  defaults write com.apple.LaunchServices LSHandlers -array-add '{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.3;}'

  # Set notification banner display time
  defaults write com.apple.notificationcenterui bannerTime 3

  ###############################################################################
  # Finder
  ###############################################################################

  # Show the ~/Library folder.
  chflags nohidden ~/Library

  # Always open everything in Finder's column view.
  #defaults write com.apple.Finder FXPreferredViewStyle Nlsv

  # Show hidden files and file extensions by default
  #defaults write com.apple.finder AppleShowAllFiles -bool true
  #defaults write NSGlobalDomain AppleShowAllExtensions -bool true

  # Disable the warning when changing file extensions
  #defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

  # Allow text-selection in Quick Look
  #defaults write com.apple.finder QLEnableTextSelection -bool true

  # Disable the warning before emptying the Trash
  #defaults write com.apple.finder WarnOnEmptyTrash -bool false

  # Enable auto-correct
  #defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool true

  # Disable the “Are you sure you want to open this application?” dialog
  defaults write com.apple.LaunchServices LSQuarantine -bool false

  # Expand print panel by default
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true

  # Expand save panel by default
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

  # Disable Resume system-wide
  #defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false

  # Disable the crash reporter
  defaults write com.apple.CrashReporter DialogType -string "none"


  # Show New Windows show folder
  defaults write com.apple.finder NewWindowTargetPath "file://$HOME/"

  ###############################################################################
  # Dock
  ###############################################################################

  # Show indicator lights for open applications in the Dock
  #defaults write com.apple.dock show-process-indicators -bool true

  # Add several spacers
  #defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'
  #defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'
  #defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'
  #defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'

  # Automatically hide and show the Dock
  # defaults write com.apple.dock autohide -bool true

  # Do not show recents
  defaults write com.apple.dock show-recents -bool false



  ################
  # Calendar
  ################
  defaults write com.apple.iCal "Default duration in minutes for new event" -int 15

}



run_cleanup () {
###############################################################################
# Do some clean up work.
###############################################################################

for app in "Activity Monitor" "Address Book" "Calendar" "Contacts" "cfprefsd" \
          "Dock" "Finder" "Mail" "Messages" "Safari" "SystemUIServer" \
          "Terminal" "Twitter" "iCal"; do
          kill all "${app}" > /dev/null 2>&1
done

# Wait a bit before moving on...
sleep 1
}

# See if the user wants to reboot.
function reboot() {
  read -p "Do you want to reboot your computer now? (y/N)" choice
  case "$choice" in
    y | Yes | yes ) echo "Yes"; exit;; # If y | yes, reboot
    n | N | No | no) echo "No"; exit;; # If n | no, exit
    * ) echo "Invalid answer. Enter \"y/yes\" or \"N/no\"" && return;;
  esac
}



# install_zsh
# install_terminal_themes
# run_dockutil
# install_iterm_prefs
customize_osx
run_cleanup


# ...and then.
echo "Success! Defaults are set."
echo "Some changes will not take effect until you reboot your machine."

# Call on the function
if [[ "Yes" == $(reboot) ]]
then
  echo "Rebooting."
  sudo reboot
  exit 0
else
  exit 1
fi
